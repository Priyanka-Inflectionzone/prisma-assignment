
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model institute
 * 
 */
export type institute = {
  Id: number
  InstituteName: string
  Address: string
}

/**
 * Model user
 * 
 */
export type user = {
  UserId: number
  firstName: string
  lastName: string
  emailId: string
  Phone: string
  Age: string
  Gender: string
  Institute_id: number
  JoinedOn: Date
  EndedOn: Date | null
}

/**
 * Model course
 * 
 */
export type course = {
  CourseId: number
  CourseName: string
  NumberOfStudents: number
  Trainer_id: number
}

/**
 * Model staff
 * 
 */
export type staff = {
  StaffId: number
  StaffType: string
  Salary: number
}

/**
 * Model Student
 * 
 */
export type Student = {
  StudentId: number
  EnrolledFor: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Institutes
 * const institutes = await prisma.institute.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Institutes
   * const institutes = await prisma.institute.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.institute`: Exposes CRUD operations for the **institute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Institutes
    * const institutes = await prisma.institute.findMany()
    * ```
    */
  get institute(): Prisma.instituteDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<GlobalReject>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.courseDelegate<GlobalReject>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.staffDelegate<GlobalReject>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    institute: 'institute',
    user: 'user',
    course: 'course',
    staff: 'staff',
    Student: 'Student'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InstituteCountOutputType
   */


  export type InstituteCountOutputType = {
    user: number
  }

  export type InstituteCountOutputTypeSelect = {
    user?: boolean
  }

  export type InstituteCountOutputTypeGetPayload<
    S extends boolean | null | undefined | InstituteCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? InstituteCountOutputType
    : S extends undefined
    ? never
    : S extends InstituteCountOutputTypeArgs
    ?'include' extends U
    ? InstituteCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof InstituteCountOutputType ? InstituteCountOutputType[P] : never
  } 
    : InstituteCountOutputType
  : InstituteCountOutputType




  // Custom InputTypes

  /**
   * InstituteCountOutputType without action
   */
  export type InstituteCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the InstituteCountOutputType
     * 
    **/
    select?: InstituteCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Staff: number
    Student: number
  }

  export type UserCountOutputTypeSelect = {
    Staff?: boolean
    Student?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CourseCountOutputType
   */


  export type CourseCountOutputType = {
    Students: number
  }

  export type CourseCountOutputTypeSelect = {
    Students?: boolean
  }

  export type CourseCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CourseCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CourseCountOutputType
    : S extends undefined
    ? never
    : S extends CourseCountOutputTypeArgs
    ?'include' extends U
    ? CourseCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CourseCountOutputType ? CourseCountOutputType[P] : never
  } 
    : CourseCountOutputType
  : CourseCountOutputType




  // Custom InputTypes

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     * 
    **/
    select?: CourseCountOutputTypeSelect | null
  }



  /**
   * Count Type StaffCountOutputType
   */


  export type StaffCountOutputType = {
    Course: number
  }

  export type StaffCountOutputTypeSelect = {
    Course?: boolean
  }

  export type StaffCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StaffCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StaffCountOutputType
    : S extends undefined
    ? never
    : S extends StaffCountOutputTypeArgs
    ?'include' extends U
    ? StaffCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StaffCountOutputType ? StaffCountOutputType[P] : never
  } 
    : StaffCountOutputType
  : StaffCountOutputType




  // Custom InputTypes

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     * 
    **/
    select?: StaffCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model institute
   */


  export type AggregateInstitute = {
    _count: InstituteCountAggregateOutputType | null
    _avg: InstituteAvgAggregateOutputType | null
    _sum: InstituteSumAggregateOutputType | null
    _min: InstituteMinAggregateOutputType | null
    _max: InstituteMaxAggregateOutputType | null
  }

  export type InstituteAvgAggregateOutputType = {
    Id: number | null
  }

  export type InstituteSumAggregateOutputType = {
    Id: number | null
  }

  export type InstituteMinAggregateOutputType = {
    Id: number | null
    InstituteName: string | null
    Address: string | null
  }

  export type InstituteMaxAggregateOutputType = {
    Id: number | null
    InstituteName: string | null
    Address: string | null
  }

  export type InstituteCountAggregateOutputType = {
    Id: number
    InstituteName: number
    Address: number
    _all: number
  }


  export type InstituteAvgAggregateInputType = {
    Id?: true
  }

  export type InstituteSumAggregateInputType = {
    Id?: true
  }

  export type InstituteMinAggregateInputType = {
    Id?: true
    InstituteName?: true
    Address?: true
  }

  export type InstituteMaxAggregateInputType = {
    Id?: true
    InstituteName?: true
    Address?: true
  }

  export type InstituteCountAggregateInputType = {
    Id?: true
    InstituteName?: true
    Address?: true
    _all?: true
  }

  export type InstituteAggregateArgs = {
    /**
     * Filter which institute to aggregate.
     * 
    **/
    where?: instituteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institutes to fetch.
     * 
    **/
    orderBy?: Enumerable<instituteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: instituteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institutes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institutes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned institutes
    **/
    _count?: true | InstituteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InstituteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InstituteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstituteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstituteMaxAggregateInputType
  }

  export type GetInstituteAggregateType<T extends InstituteAggregateArgs> = {
        [P in keyof T & keyof AggregateInstitute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstitute[P]>
      : GetScalarType<T[P], AggregateInstitute[P]>
  }




  export type InstituteGroupByArgs = {
    where?: instituteWhereInput
    orderBy?: Enumerable<instituteOrderByWithAggregationInput>
    by: Array<InstituteScalarFieldEnum>
    having?: instituteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstituteCountAggregateInputType | true
    _avg?: InstituteAvgAggregateInputType
    _sum?: InstituteSumAggregateInputType
    _min?: InstituteMinAggregateInputType
    _max?: InstituteMaxAggregateInputType
  }


  export type InstituteGroupByOutputType = {
    Id: number
    InstituteName: string
    Address: string
    _count: InstituteCountAggregateOutputType | null
    _avg: InstituteAvgAggregateOutputType | null
    _sum: InstituteSumAggregateOutputType | null
    _min: InstituteMinAggregateOutputType | null
    _max: InstituteMaxAggregateOutputType | null
  }

  type GetInstituteGroupByPayload<T extends InstituteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<InstituteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstituteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstituteGroupByOutputType[P]>
            : GetScalarType<T[P], InstituteGroupByOutputType[P]>
        }
      >
    >


  export type instituteSelect = {
    Id?: boolean
    InstituteName?: boolean
    Address?: boolean
    user?: boolean | userFindManyArgs
    _count?: boolean | InstituteCountOutputTypeArgs
  }

  export type instituteInclude = {
    user?: boolean | userFindManyArgs
    _count?: boolean | InstituteCountOutputTypeArgs
  }

  export type instituteGetPayload<
    S extends boolean | null | undefined | instituteArgs,
    U = keyof S
      > = S extends true
        ? institute
    : S extends undefined
    ? never
    : S extends instituteArgs | instituteFindManyArgs
    ?'include' extends U
    ? institute  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? Array < userGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? InstituteCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? Array < userGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? InstituteCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof institute ? institute[P] : never
  } 
    : institute
  : institute


  type instituteCountArgs = Merge<
    Omit<instituteFindManyArgs, 'select' | 'include'> & {
      select?: InstituteCountAggregateInputType | true
    }
  >

  export interface instituteDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Institute that matches the filter.
     * @param {instituteFindUniqueArgs} args - Arguments to find a Institute
     * @example
     * // Get one Institute
     * const institute = await prisma.institute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends instituteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, instituteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'institute'> extends True ? CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>> : CheckSelect<T, Prisma__instituteClient<institute | null, null>, Prisma__instituteClient<instituteGetPayload<T> | null, null>>

    /**
     * Find the first Institute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {instituteFindFirstArgs} args - Arguments to find a Institute
     * @example
     * // Get one Institute
     * const institute = await prisma.institute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends instituteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, instituteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'institute'> extends True ? CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>> : CheckSelect<T, Prisma__instituteClient<institute | null, null>, Prisma__instituteClient<instituteGetPayload<T> | null, null>>

    /**
     * Find zero or more Institutes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {instituteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Institutes
     * const institutes = await prisma.institute.findMany()
     * 
     * // Get first 10 Institutes
     * const institutes = await prisma.institute.findMany({ take: 10 })
     * 
     * // Only select the `Id`
     * const instituteWithIdOnly = await prisma.institute.findMany({ select: { Id: true } })
     * 
    **/
    findMany<T extends instituteFindManyArgs>(
      args?: SelectSubset<T, instituteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<institute>>, PrismaPromise<Array<instituteGetPayload<T>>>>

    /**
     * Create a Institute.
     * @param {instituteCreateArgs} args - Arguments to create a Institute.
     * @example
     * // Create one Institute
     * const Institute = await prisma.institute.create({
     *   data: {
     *     // ... data to create a Institute
     *   }
     * })
     * 
    **/
    create<T extends instituteCreateArgs>(
      args: SelectSubset<T, instituteCreateArgs>
    ): CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>>

    /**
     * Create many Institutes.
     *     @param {instituteCreateManyArgs} args - Arguments to create many Institutes.
     *     @example
     *     // Create many Institutes
     *     const institute = await prisma.institute.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends instituteCreateManyArgs>(
      args?: SelectSubset<T, instituteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Institute.
     * @param {instituteDeleteArgs} args - Arguments to delete one Institute.
     * @example
     * // Delete one Institute
     * const Institute = await prisma.institute.delete({
     *   where: {
     *     // ... filter to delete one Institute
     *   }
     * })
     * 
    **/
    delete<T extends instituteDeleteArgs>(
      args: SelectSubset<T, instituteDeleteArgs>
    ): CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>>

    /**
     * Update one Institute.
     * @param {instituteUpdateArgs} args - Arguments to update one Institute.
     * @example
     * // Update one Institute
     * const institute = await prisma.institute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends instituteUpdateArgs>(
      args: SelectSubset<T, instituteUpdateArgs>
    ): CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>>

    /**
     * Delete zero or more Institutes.
     * @param {instituteDeleteManyArgs} args - Arguments to filter Institutes to delete.
     * @example
     * // Delete a few Institutes
     * const { count } = await prisma.institute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends instituteDeleteManyArgs>(
      args?: SelectSubset<T, instituteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Institutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {instituteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Institutes
     * const institute = await prisma.institute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends instituteUpdateManyArgs>(
      args: SelectSubset<T, instituteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Institute.
     * @param {instituteUpsertArgs} args - Arguments to update or create a Institute.
     * @example
     * // Update or create a Institute
     * const institute = await prisma.institute.upsert({
     *   create: {
     *     // ... data to create a Institute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Institute we want to update
     *   }
     * })
    **/
    upsert<T extends instituteUpsertArgs>(
      args: SelectSubset<T, instituteUpsertArgs>
    ): CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>>

    /**
     * Find one Institute that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {instituteFindUniqueOrThrowArgs} args - Arguments to find a Institute
     * @example
     * // Get one Institute
     * const institute = await prisma.institute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends instituteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, instituteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>>

    /**
     * Find the first Institute that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {instituteFindFirstOrThrowArgs} args - Arguments to find a Institute
     * @example
     * // Get one Institute
     * const institute = await prisma.institute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends instituteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, instituteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__instituteClient<institute>, Prisma__instituteClient<instituteGetPayload<T>>>

    /**
     * Count the number of Institutes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {instituteCountArgs} args - Arguments to filter Institutes to count.
     * @example
     * // Count the number of Institutes
     * const count = await prisma.institute.count({
     *   where: {
     *     // ... the filter for the Institutes we want to count
     *   }
     * })
    **/
    count<T extends instituteCountArgs>(
      args?: Subset<T, instituteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstituteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Institute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstituteAggregateArgs>(args: Subset<T, InstituteAggregateArgs>): PrismaPromise<GetInstituteAggregateType<T>>

    /**
     * Group by Institute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstituteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstituteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstituteGroupByArgs['orderBy'] }
        : { orderBy?: InstituteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstituteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstituteGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for institute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__instituteClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends userFindManyArgs = {}>(args?: Subset<T, userFindManyArgs>): CheckSelect<T, PrismaPromise<Array<user>| Null>, PrismaPromise<Array<userGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * institute base type for findUnique actions
   */
  export type instituteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * Filter, which institute to fetch.
     * 
    **/
    where: instituteWhereUniqueInput
  }

  /**
   * institute: findUnique
   */
  export interface instituteFindUniqueArgs extends instituteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * institute base type for findFirst actions
   */
  export type instituteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * Filter, which institute to fetch.
     * 
    **/
    where?: instituteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institutes to fetch.
     * 
    **/
    orderBy?: Enumerable<instituteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for institutes.
     * 
    **/
    cursor?: instituteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institutes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institutes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of institutes.
     * 
    **/
    distinct?: Enumerable<InstituteScalarFieldEnum>
  }

  /**
   * institute: findFirst
   */
  export interface instituteFindFirstArgs extends instituteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * institute findMany
   */
  export type instituteFindManyArgs = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * Filter, which institutes to fetch.
     * 
    **/
    where?: instituteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of institutes to fetch.
     * 
    **/
    orderBy?: Enumerable<instituteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing institutes.
     * 
    **/
    cursor?: instituteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` institutes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` institutes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<InstituteScalarFieldEnum>
  }


  /**
   * institute create
   */
  export type instituteCreateArgs = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * The data needed to create a institute.
     * 
    **/
    data: XOR<instituteCreateInput, instituteUncheckedCreateInput>
  }


  /**
   * institute createMany
   */
  export type instituteCreateManyArgs = {
    /**
     * The data used to create many institutes.
     * 
    **/
    data: Enumerable<instituteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * institute update
   */
  export type instituteUpdateArgs = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * The data needed to update a institute.
     * 
    **/
    data: XOR<instituteUpdateInput, instituteUncheckedUpdateInput>
    /**
     * Choose, which institute to update.
     * 
    **/
    where: instituteWhereUniqueInput
  }


  /**
   * institute updateMany
   */
  export type instituteUpdateManyArgs = {
    /**
     * The data used to update institutes.
     * 
    **/
    data: XOR<instituteUpdateManyMutationInput, instituteUncheckedUpdateManyInput>
    /**
     * Filter which institutes to update
     * 
    **/
    where?: instituteWhereInput
  }


  /**
   * institute upsert
   */
  export type instituteUpsertArgs = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * The filter to search for the institute to update in case it exists.
     * 
    **/
    where: instituteWhereUniqueInput
    /**
     * In case the institute found by the `where` argument doesn't exist, create a new institute with this data.
     * 
    **/
    create: XOR<instituteCreateInput, instituteUncheckedCreateInput>
    /**
     * In case the institute was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<instituteUpdateInput, instituteUncheckedUpdateInput>
  }


  /**
   * institute delete
   */
  export type instituteDeleteArgs = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
    /**
     * Filter which institute to delete.
     * 
    **/
    where: instituteWhereUniqueInput
  }


  /**
   * institute deleteMany
   */
  export type instituteDeleteManyArgs = {
    /**
     * Filter which institutes to delete
     * 
    **/
    where?: instituteWhereInput
  }


  /**
   * institute: findUniqueOrThrow
   */
  export type instituteFindUniqueOrThrowArgs = instituteFindUniqueArgsBase
      

  /**
   * institute: findFirstOrThrow
   */
  export type instituteFindFirstOrThrowArgs = instituteFindFirstArgsBase
      

  /**
   * institute without action
   */
  export type instituteArgs = {
    /**
     * Select specific fields to fetch from the institute
     * 
    **/
    select?: instituteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: instituteInclude | null
  }



  /**
   * Model user
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    UserId: number | null
    Institute_id: number | null
  }

  export type UserSumAggregateOutputType = {
    UserId: number | null
    Institute_id: number | null
  }

  export type UserMinAggregateOutputType = {
    UserId: number | null
    firstName: string | null
    lastName: string | null
    emailId: string | null
    Phone: string | null
    Age: string | null
    Gender: string | null
    Institute_id: number | null
    JoinedOn: Date | null
    EndedOn: Date | null
  }

  export type UserMaxAggregateOutputType = {
    UserId: number | null
    firstName: string | null
    lastName: string | null
    emailId: string | null
    Phone: string | null
    Age: string | null
    Gender: string | null
    Institute_id: number | null
    JoinedOn: Date | null
    EndedOn: Date | null
  }

  export type UserCountAggregateOutputType = {
    UserId: number
    firstName: number
    lastName: number
    emailId: number
    Phone: number
    Age: number
    Gender: number
    Institute_id: number
    JoinedOn: number
    EndedOn: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    UserId?: true
    Institute_id?: true
  }

  export type UserSumAggregateInputType = {
    UserId?: true
    Institute_id?: true
  }

  export type UserMinAggregateInputType = {
    UserId?: true
    firstName?: true
    lastName?: true
    emailId?: true
    Phone?: true
    Age?: true
    Gender?: true
    Institute_id?: true
    JoinedOn?: true
    EndedOn?: true
  }

  export type UserMaxAggregateInputType = {
    UserId?: true
    firstName?: true
    lastName?: true
    emailId?: true
    Phone?: true
    Age?: true
    Gender?: true
    Institute_id?: true
    JoinedOn?: true
    EndedOn?: true
  }

  export type UserCountAggregateInputType = {
    UserId?: true
    firstName?: true
    lastName?: true
    emailId?: true
    Phone?: true
    Age?: true
    Gender?: true
    Institute_id?: true
    JoinedOn?: true
    EndedOn?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which user to aggregate.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: userWhereInput
    orderBy?: Enumerable<userOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    UserId: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute_id: number
    JoinedOn: Date
    EndedOn: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect = {
    UserId?: boolean
    firstName?: boolean
    lastName?: boolean
    emailId?: boolean
    Phone?: boolean
    Age?: boolean
    Gender?: boolean
    Institute?: boolean | instituteArgs
    Institute_id?: boolean
    JoinedOn?: boolean
    EndedOn?: boolean
    Staff?: boolean | staffFindManyArgs
    Student?: boolean | StudentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userInclude = {
    Institute?: boolean | instituteArgs
    Staff?: boolean | staffFindManyArgs
    Student?: boolean | StudentFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type userGetPayload<
    S extends boolean | null | undefined | userArgs,
    U = keyof S
      > = S extends true
        ? user
    : S extends undefined
    ? never
    : S extends userArgs | userFindManyArgs
    ?'include' extends U
    ? user  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Institute' ? instituteGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Staff' ? Array < staffGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'Student' ? Array < StudentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Institute' ? instituteGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Staff' ? Array < staffGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'Student' ? Array < StudentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof user ? user[P] : never
  } 
    : user
  : user


  type userCountArgs = Merge<
    Omit<userFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface userDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, userFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null, null>, Prisma__userClient<userGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, userFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'user'> extends True ? CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>> : CheckSelect<T, Prisma__userClient<user | null, null>, Prisma__userClient<userGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `UserId`
     * const userWithUserIdOnly = await prisma.user.findMany({ select: { UserId: true } })
     * 
    **/
    findMany<T extends userFindManyArgs>(
      args?: SelectSubset<T, userFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<user>>, PrismaPromise<Array<userGetPayload<T>>>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends userCreateArgs>(
      args: SelectSubset<T, userCreateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {userCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userCreateManyArgs>(
      args?: SelectSubset<T, userCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends userDeleteArgs>(
      args: SelectSubset<T, userDeleteArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userUpdateArgs>(
      args: SelectSubset<T, userUpdateArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userDeleteManyArgs>(
      args?: SelectSubset<T, userDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userUpdateManyArgs>(
      args: SelectSubset<T, userUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends userUpsertArgs>(
      args: SelectSubset<T, userUpsertArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, userFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(
      args?: SelectSubset<T, userFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__userClient<user>, Prisma__userClient<userGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__userClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Institute<T extends instituteArgs = {}>(args?: Subset<T, instituteArgs>): CheckSelect<T, Prisma__instituteClient<institute | Null>, Prisma__instituteClient<instituteGetPayload<T> | Null>>;

    Staff<T extends staffFindManyArgs = {}>(args?: Subset<T, staffFindManyArgs>): CheckSelect<T, PrismaPromise<Array<staff>| Null>, PrismaPromise<Array<staffGetPayload<T>>| Null>>;

    Student<T extends StudentFindManyArgs = {}>(args?: Subset<T, StudentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Student>| Null>, PrismaPromise<Array<StudentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * user base type for findUnique actions
   */
  export type userFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where: userWhereUniqueInput
  }

  /**
   * user: findUnique
   */
  export interface userFindUniqueArgs extends userFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user base type for findFirst actions
   */
  export type userFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which user to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * user: findFirst
   */
  export interface userFindFirstArgs extends userFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * user findMany
   */
  export type userFindManyArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<userOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * user create
   */
  export type userCreateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to create a user.
     * 
    **/
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }


  /**
   * user createMany
   */
  export type userCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<userCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * user update
   */
  export type userUpdateArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The data needed to update a user.
     * 
    **/
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user updateMany
   */
  export type userUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user upsert
   */
  export type userUpsertArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * The filter to search for the user to update in case it exists.
     * 
    **/
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     * 
    **/
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }


  /**
   * user delete
   */
  export type userDeleteArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
    /**
     * Filter which user to delete.
     * 
    **/
    where: userWhereUniqueInput
  }


  /**
   * user deleteMany
   */
  export type userDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: userWhereInput
  }


  /**
   * user: findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs = userFindUniqueArgsBase
      

  /**
   * user: findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs = userFindFirstArgsBase
      

  /**
   * user without action
   */
  export type userArgs = {
    /**
     * Select specific fields to fetch from the user
     * 
    **/
    select?: userSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: userInclude | null
  }



  /**
   * Model course
   */


  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    CourseId: number | null
    NumberOfStudents: number | null
    Trainer_id: number | null
  }

  export type CourseSumAggregateOutputType = {
    CourseId: number | null
    NumberOfStudents: number | null
    Trainer_id: number | null
  }

  export type CourseMinAggregateOutputType = {
    CourseId: number | null
    CourseName: string | null
    NumberOfStudents: number | null
    Trainer_id: number | null
  }

  export type CourseMaxAggregateOutputType = {
    CourseId: number | null
    CourseName: string | null
    NumberOfStudents: number | null
    Trainer_id: number | null
  }

  export type CourseCountAggregateOutputType = {
    CourseId: number
    CourseName: number
    NumberOfStudents: number
    Trainer_id: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    CourseId?: true
    NumberOfStudents?: true
    Trainer_id?: true
  }

  export type CourseSumAggregateInputType = {
    CourseId?: true
    NumberOfStudents?: true
    Trainer_id?: true
  }

  export type CourseMinAggregateInputType = {
    CourseId?: true
    CourseName?: true
    NumberOfStudents?: true
    Trainer_id?: true
  }

  export type CourseMaxAggregateInputType = {
    CourseId?: true
    CourseName?: true
    NumberOfStudents?: true
    Trainer_id?: true
  }

  export type CourseCountAggregateInputType = {
    CourseId?: true
    CourseName?: true
    NumberOfStudents?: true
    Trainer_id?: true
    _all?: true
  }

  export type CourseAggregateArgs = {
    /**
     * Filter which course to aggregate.
     * 
    **/
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     * 
    **/
    orderBy?: Enumerable<courseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs = {
    where?: courseWhereInput
    orderBy?: Enumerable<courseOrderByWithAggregationInput>
    by: Array<CourseScalarFieldEnum>
    having?: courseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }


  export type CourseGroupByOutputType = {
    CourseId: number
    CourseName: string
    NumberOfStudents: number
    Trainer_id: number
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type courseSelect = {
    CourseId?: boolean
    CourseName?: boolean
    NumberOfStudents?: boolean
    Trainer?: boolean | staffArgs
    Trainer_id?: boolean
    Students?: boolean | StudentFindManyArgs
    _count?: boolean | CourseCountOutputTypeArgs
  }

  export type courseInclude = {
    Trainer?: boolean | staffArgs
    Students?: boolean | StudentFindManyArgs
    _count?: boolean | CourseCountOutputTypeArgs
  }

  export type courseGetPayload<
    S extends boolean | null | undefined | courseArgs,
    U = keyof S
      > = S extends true
        ? course
    : S extends undefined
    ? never
    : S extends courseArgs | courseFindManyArgs
    ?'include' extends U
    ? course  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Trainer' ? staffGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Students' ? Array < StudentGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CourseCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Trainer' ? staffGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Students' ? Array < StudentGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CourseCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof course ? course[P] : never
  } 
    : course
  : course


  type courseCountArgs = Merge<
    Omit<courseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }
  >

  export interface courseDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Course that matches the filter.
     * @param {courseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends courseFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, courseFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'course'> extends True ? CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>> : CheckSelect<T, Prisma__courseClient<course | null, null>, Prisma__courseClient<courseGetPayload<T> | null, null>>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends courseFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, courseFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'course'> extends True ? CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>> : CheckSelect<T, Prisma__courseClient<course | null, null>, Prisma__courseClient<courseGetPayload<T> | null, null>>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `CourseId`
     * const courseWithCourseIdOnly = await prisma.course.findMany({ select: { CourseId: true } })
     * 
    **/
    findMany<T extends courseFindManyArgs>(
      args?: SelectSubset<T, courseFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<course>>, PrismaPromise<Array<courseGetPayload<T>>>>

    /**
     * Create a Course.
     * @param {courseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends courseCreateArgs>(
      args: SelectSubset<T, courseCreateArgs>
    ): CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>>

    /**
     * Create many Courses.
     *     @param {courseCreateManyArgs} args - Arguments to create many Courses.
     *     @example
     *     // Create many Courses
     *     const course = await prisma.course.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends courseCreateManyArgs>(
      args?: SelectSubset<T, courseCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Course.
     * @param {courseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends courseDeleteArgs>(
      args: SelectSubset<T, courseDeleteArgs>
    ): CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>>

    /**
     * Update one Course.
     * @param {courseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends courseUpdateArgs>(
      args: SelectSubset<T, courseUpdateArgs>
    ): CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>>

    /**
     * Delete zero or more Courses.
     * @param {courseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends courseDeleteManyArgs>(
      args?: SelectSubset<T, courseDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends courseUpdateManyArgs>(
      args: SelectSubset<T, courseUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {courseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends courseUpsertArgs>(
      args: SelectSubset<T, courseUpsertArgs>
    ): CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>>

    /**
     * Find one Course that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {courseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends courseFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, courseFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>>

    /**
     * Find the first Course that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends courseFindFirstOrThrowArgs>(
      args?: SelectSubset<T, courseFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__courseClient<course>, Prisma__courseClient<courseGetPayload<T>>>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends courseCountArgs>(
      args?: Subset<T, courseCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__courseClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Trainer<T extends staffArgs = {}>(args?: Subset<T, staffArgs>): CheckSelect<T, Prisma__staffClient<staff | Null>, Prisma__staffClient<staffGetPayload<T> | Null>>;

    Students<T extends StudentFindManyArgs = {}>(args?: Subset<T, StudentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Student>| Null>, PrismaPromise<Array<StudentGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * course base type for findUnique actions
   */
  export type courseFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * Filter, which course to fetch.
     * 
    **/
    where: courseWhereUniqueInput
  }

  /**
   * course: findUnique
   */
  export interface courseFindUniqueArgs extends courseFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * course base type for findFirst actions
   */
  export type courseFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * Filter, which course to fetch.
     * 
    **/
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     * 
    **/
    orderBy?: Enumerable<courseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     * 
    **/
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     * 
    **/
    distinct?: Enumerable<CourseScalarFieldEnum>
  }

  /**
   * course: findFirst
   */
  export interface courseFindFirstArgs extends courseFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * course findMany
   */
  export type courseFindManyArgs = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * Filter, which courses to fetch.
     * 
    **/
    where?: courseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     * 
    **/
    orderBy?: Enumerable<courseOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courses.
     * 
    **/
    cursor?: courseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * course create
   */
  export type courseCreateArgs = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * The data needed to create a course.
     * 
    **/
    data: XOR<courseCreateInput, courseUncheckedCreateInput>
  }


  /**
   * course createMany
   */
  export type courseCreateManyArgs = {
    /**
     * The data used to create many courses.
     * 
    **/
    data: Enumerable<courseCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * course update
   */
  export type courseUpdateArgs = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * The data needed to update a course.
     * 
    **/
    data: XOR<courseUpdateInput, courseUncheckedUpdateInput>
    /**
     * Choose, which course to update.
     * 
    **/
    where: courseWhereUniqueInput
  }


  /**
   * course updateMany
   */
  export type courseUpdateManyArgs = {
    /**
     * The data used to update courses.
     * 
    **/
    data: XOR<courseUpdateManyMutationInput, courseUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     * 
    **/
    where?: courseWhereInput
  }


  /**
   * course upsert
   */
  export type courseUpsertArgs = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * The filter to search for the course to update in case it exists.
     * 
    **/
    where: courseWhereUniqueInput
    /**
     * In case the course found by the `where` argument doesn't exist, create a new course with this data.
     * 
    **/
    create: XOR<courseCreateInput, courseUncheckedCreateInput>
    /**
     * In case the course was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<courseUpdateInput, courseUncheckedUpdateInput>
  }


  /**
   * course delete
   */
  export type courseDeleteArgs = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
    /**
     * Filter which course to delete.
     * 
    **/
    where: courseWhereUniqueInput
  }


  /**
   * course deleteMany
   */
  export type courseDeleteManyArgs = {
    /**
     * Filter which courses to delete
     * 
    **/
    where?: courseWhereInput
  }


  /**
   * course: findUniqueOrThrow
   */
  export type courseFindUniqueOrThrowArgs = courseFindUniqueArgsBase
      

  /**
   * course: findFirstOrThrow
   */
  export type courseFindFirstOrThrowArgs = courseFindFirstArgsBase
      

  /**
   * course without action
   */
  export type courseArgs = {
    /**
     * Select specific fields to fetch from the course
     * 
    **/
    select?: courseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseInclude | null
  }



  /**
   * Model staff
   */


  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    StaffId: number | null
    Salary: number | null
  }

  export type StaffSumAggregateOutputType = {
    StaffId: number | null
    Salary: number | null
  }

  export type StaffMinAggregateOutputType = {
    StaffId: number | null
    StaffType: string | null
    Salary: number | null
  }

  export type StaffMaxAggregateOutputType = {
    StaffId: number | null
    StaffType: string | null
    Salary: number | null
  }

  export type StaffCountAggregateOutputType = {
    StaffId: number
    StaffType: number
    Salary: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    StaffId?: true
    Salary?: true
  }

  export type StaffSumAggregateInputType = {
    StaffId?: true
    Salary?: true
  }

  export type StaffMinAggregateInputType = {
    StaffId?: true
    StaffType?: true
    Salary?: true
  }

  export type StaffMaxAggregateInputType = {
    StaffId?: true
    StaffType?: true
    Salary?: true
  }

  export type StaffCountAggregateInputType = {
    StaffId?: true
    StaffType?: true
    Salary?: true
    _all?: true
  }

  export type StaffAggregateArgs = {
    /**
     * Filter which staff to aggregate.
     * 
    **/
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     * 
    **/
    orderBy?: Enumerable<staffOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type StaffGroupByArgs = {
    where?: staffWhereInput
    orderBy?: Enumerable<staffOrderByWithAggregationInput>
    by: Array<StaffScalarFieldEnum>
    having?: staffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }


  export type StaffGroupByOutputType = {
    StaffId: number
    StaffType: string
    Salary: number
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends StaffGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type staffSelect = {
    StaffId?: boolean
    userId?: boolean | userArgs
    StaffType?: boolean
    Salary?: boolean
    Course?: boolean | courseFindManyArgs
    _count?: boolean | StaffCountOutputTypeArgs
  }

  export type staffInclude = {
    userId?: boolean | userArgs
    Course?: boolean | courseFindManyArgs
    _count?: boolean | StaffCountOutputTypeArgs
  }

  export type staffGetPayload<
    S extends boolean | null | undefined | staffArgs,
    U = keyof S
      > = S extends true
        ? staff
    : S extends undefined
    ? never
    : S extends staffArgs | staffFindManyArgs
    ?'include' extends U
    ? staff  & {
    [P in TrueKeys<S['include']>]:
        P extends 'userId' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Course' ? Array < courseGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StaffCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'userId' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Course' ? Array < courseGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StaffCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof staff ? staff[P] : never
  } 
    : staff
  : staff


  type staffCountArgs = Merge<
    Omit<staffFindManyArgs, 'select' | 'include'> & {
      select?: StaffCountAggregateInputType | true
    }
  >

  export interface staffDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Staff that matches the filter.
     * @param {staffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends staffFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, staffFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'staff'> extends True ? CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>> : CheckSelect<T, Prisma__staffClient<staff | null, null>, Prisma__staffClient<staffGetPayload<T> | null, null>>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends staffFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, staffFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'staff'> extends True ? CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>> : CheckSelect<T, Prisma__staffClient<staff | null, null>, Prisma__staffClient<staffGetPayload<T> | null, null>>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `StaffId`
     * const staffWithStaffIdOnly = await prisma.staff.findMany({ select: { StaffId: true } })
     * 
    **/
    findMany<T extends staffFindManyArgs>(
      args?: SelectSubset<T, staffFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<staff>>, PrismaPromise<Array<staffGetPayload<T>>>>

    /**
     * Create a Staff.
     * @param {staffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
    **/
    create<T extends staffCreateArgs>(
      args: SelectSubset<T, staffCreateArgs>
    ): CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>>

    /**
     * Create many Staff.
     *     @param {staffCreateManyArgs} args - Arguments to create many Staff.
     *     @example
     *     // Create many Staff
     *     const staff = await prisma.staff.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends staffCreateManyArgs>(
      args?: SelectSubset<T, staffCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Staff.
     * @param {staffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
    **/
    delete<T extends staffDeleteArgs>(
      args: SelectSubset<T, staffDeleteArgs>
    ): CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>>

    /**
     * Update one Staff.
     * @param {staffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends staffUpdateArgs>(
      args: SelectSubset<T, staffUpdateArgs>
    ): CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>>

    /**
     * Delete zero or more Staff.
     * @param {staffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends staffDeleteManyArgs>(
      args?: SelectSubset<T, staffDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends staffUpdateManyArgs>(
      args: SelectSubset<T, staffUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Staff.
     * @param {staffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
    **/
    upsert<T extends staffUpsertArgs>(
      args: SelectSubset<T, staffUpsertArgs>
    ): CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>>

    /**
     * Find one Staff that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {staffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends staffFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, staffFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>>

    /**
     * Find the first Staff that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends staffFindFirstOrThrowArgs>(
      args?: SelectSubset<T, staffFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__staffClient<staff>, Prisma__staffClient<staffGetPayload<T>>>

    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends staffCountArgs>(
      args?: Subset<T, staffCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffGroupByArgs['orderBy'] }
        : { orderBy?: StaffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__staffClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userId<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    Course<T extends courseFindManyArgs = {}>(args?: Subset<T, courseFindManyArgs>): CheckSelect<T, PrismaPromise<Array<course>| Null>, PrismaPromise<Array<courseGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * staff base type for findUnique actions
   */
  export type staffFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * Filter, which staff to fetch.
     * 
    **/
    where: staffWhereUniqueInput
  }

  /**
   * staff: findUnique
   */
  export interface staffFindUniqueArgs extends staffFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * staff base type for findFirst actions
   */
  export type staffFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * Filter, which staff to fetch.
     * 
    **/
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     * 
    **/
    orderBy?: Enumerable<staffOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for staff.
     * 
    **/
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of staff.
     * 
    **/
    distinct?: Enumerable<StaffScalarFieldEnum>
  }

  /**
   * staff: findFirst
   */
  export interface staffFindFirstArgs extends staffFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * staff findMany
   */
  export type staffFindManyArgs = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * Filter, which staff to fetch.
     * 
    **/
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     * 
    **/
    orderBy?: Enumerable<staffOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing staff.
     * 
    **/
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StaffScalarFieldEnum>
  }


  /**
   * staff create
   */
  export type staffCreateArgs = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * The data needed to create a staff.
     * 
    **/
    data: XOR<staffCreateInput, staffUncheckedCreateInput>
  }


  /**
   * staff createMany
   */
  export type staffCreateManyArgs = {
    /**
     * The data used to create many staff.
     * 
    **/
    data: Enumerable<staffCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * staff update
   */
  export type staffUpdateArgs = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * The data needed to update a staff.
     * 
    **/
    data: XOR<staffUpdateInput, staffUncheckedUpdateInput>
    /**
     * Choose, which staff to update.
     * 
    **/
    where: staffWhereUniqueInput
  }


  /**
   * staff updateMany
   */
  export type staffUpdateManyArgs = {
    /**
     * The data used to update staff.
     * 
    **/
    data: XOR<staffUpdateManyMutationInput, staffUncheckedUpdateManyInput>
    /**
     * Filter which staff to update
     * 
    **/
    where?: staffWhereInput
  }


  /**
   * staff upsert
   */
  export type staffUpsertArgs = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * The filter to search for the staff to update in case it exists.
     * 
    **/
    where: staffWhereUniqueInput
    /**
     * In case the staff found by the `where` argument doesn't exist, create a new staff with this data.
     * 
    **/
    create: XOR<staffCreateInput, staffUncheckedCreateInput>
    /**
     * In case the staff was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<staffUpdateInput, staffUncheckedUpdateInput>
  }


  /**
   * staff delete
   */
  export type staffDeleteArgs = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
    /**
     * Filter which staff to delete.
     * 
    **/
    where: staffWhereUniqueInput
  }


  /**
   * staff deleteMany
   */
  export type staffDeleteManyArgs = {
    /**
     * Filter which staff to delete
     * 
    **/
    where?: staffWhereInput
  }


  /**
   * staff: findUniqueOrThrow
   */
  export type staffFindUniqueOrThrowArgs = staffFindUniqueArgsBase
      

  /**
   * staff: findFirstOrThrow
   */
  export type staffFindFirstOrThrowArgs = staffFindFirstArgsBase
      

  /**
   * staff without action
   */
  export type staffArgs = {
    /**
     * Select specific fields to fetch from the staff
     * 
    **/
    select?: staffSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: staffInclude | null
  }



  /**
   * Model Student
   */


  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    StudentId: number | null
    EnrolledFor: number | null
  }

  export type StudentSumAggregateOutputType = {
    StudentId: number | null
    EnrolledFor: number | null
  }

  export type StudentMinAggregateOutputType = {
    StudentId: number | null
    EnrolledFor: number | null
  }

  export type StudentMaxAggregateOutputType = {
    StudentId: number | null
    EnrolledFor: number | null
  }

  export type StudentCountAggregateOutputType = {
    StudentId: number
    EnrolledFor: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    StudentId?: true
    EnrolledFor?: true
  }

  export type StudentSumAggregateInputType = {
    StudentId?: true
    EnrolledFor?: true
  }

  export type StudentMinAggregateInputType = {
    StudentId?: true
    EnrolledFor?: true
  }

  export type StudentMaxAggregateInputType = {
    StudentId?: true
    EnrolledFor?: true
  }

  export type StudentCountAggregateInputType = {
    StudentId?: true
    EnrolledFor?: true
    _all?: true
  }

  export type StudentAggregateArgs = {
    /**
     * Filter which Student to aggregate.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs = {
    where?: StudentWhereInput
    orderBy?: Enumerable<StudentOrderByWithAggregationInput>
    by: Array<StudentScalarFieldEnum>
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }


  export type StudentGroupByOutputType = {
    StudentId: number
    EnrolledFor: number
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect = {
    StudentId?: boolean
    userId?: boolean | userArgs
    EnrolledFor?: boolean
    Course?: boolean | courseArgs
  }

  export type StudentInclude = {
    userId?: boolean | userArgs
    Course?: boolean | courseArgs
  }

  export type StudentGetPayload<
    S extends boolean | null | undefined | StudentArgs,
    U = keyof S
      > = S extends true
        ? Student
    : S extends undefined
    ? never
    : S extends StudentArgs | StudentFindManyArgs
    ?'include' extends U
    ? Student  & {
    [P in TrueKeys<S['include']>]:
        P extends 'userId' ? userGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'Course' ? courseGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'userId' ? userGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'Course' ? courseGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Student ? Student[P] : never
  } 
    : Student
  : Student


  type StudentCountArgs = Merge<
    Omit<StudentFindManyArgs, 'select' | 'include'> & {
      select?: StudentCountAggregateInputType | true
    }
  >

  export interface StudentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StudentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Student'> extends True ? CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>> : CheckSelect<T, Prisma__StudentClient<Student | null, null>, Prisma__StudentClient<StudentGetPayload<T> | null, null>>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StudentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Student'> extends True ? CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>> : CheckSelect<T, Prisma__StudentClient<Student | null, null>, Prisma__StudentClient<StudentGetPayload<T> | null, null>>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `StudentId`
     * const studentWithStudentIdOnly = await prisma.student.findMany({ select: { StudentId: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs>(
      args?: SelectSubset<T, StudentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Student>>, PrismaPromise<Array<StudentGetPayload<T>>>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs>(
      args: SelectSubset<T, StudentCreateArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Create many Students.
     *     @param {StudentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StudentCreateManyArgs>(
      args?: SelectSubset<T, StudentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs>(
      args: SelectSubset<T, StudentDeleteArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs>(
      args: SelectSubset<T, StudentUpdateArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs>(
      args?: SelectSubset<T, StudentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs>(
      args: SelectSubset<T, StudentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs>(
      args: SelectSubset<T, StudentUpsertArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Find one Student that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Find the first Student that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StudentClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userId<T extends userArgs = {}>(args?: Subset<T, userArgs>): CheckSelect<T, Prisma__userClient<user | Null>, Prisma__userClient<userGetPayload<T> | Null>>;

    Course<T extends courseArgs = {}>(args?: Subset<T, courseArgs>): CheckSelect<T, Prisma__courseClient<course | Null>, Prisma__courseClient<courseGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Student base type for findUnique actions
   */
  export type StudentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Student to fetch.
     * 
    **/
    where: StudentWhereUniqueInput
  }

  /**
   * Student: findUnique
   */
  export interface StudentFindUniqueArgs extends StudentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Student base type for findFirst actions
   */
  export type StudentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Student to fetch.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     * 
    **/
    distinct?: Enumerable<StudentScalarFieldEnum>
  }

  /**
   * Student: findFirst
   */
  export interface StudentFindFirstArgs extends StudentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Student findMany
   */
  export type StudentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Students to fetch.
     * 
    **/
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     * 
    **/
    orderBy?: Enumerable<StudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     * 
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * Student create
   */
  export type StudentCreateArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The data needed to create a Student.
     * 
    **/
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }


  /**
   * Student createMany
   */
  export type StudentCreateManyArgs = {
    /**
     * The data used to create many Students.
     * 
    **/
    data: Enumerable<StudentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The data needed to update a Student.
     * 
    **/
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     * 
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs = {
    /**
     * The data used to update Students.
     * 
    **/
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     * 
    **/
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * The filter to search for the Student to update in case it exists.
     * 
    **/
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     * 
    **/
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
    /**
     * Filter which Student to delete.
     * 
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs = {
    /**
     * Filter which Students to delete
     * 
    **/
    where?: StudentWhereInput
  }


  /**
   * Student: findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs = StudentFindUniqueArgsBase
      

  /**
   * Student: findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs = StudentFindFirstArgsBase
      

  /**
   * Student without action
   */
  export type StudentArgs = {
    /**
     * Select specific fields to fetch from the Student
     * 
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StudentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CourseScalarFieldEnum: {
    CourseId: 'CourseId',
    CourseName: 'CourseName',
    NumberOfStudents: 'NumberOfStudents',
    Trainer_id: 'Trainer_id'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const InstituteScalarFieldEnum: {
    Id: 'Id',
    InstituteName: 'InstituteName',
    Address: 'Address'
  };

  export type InstituteScalarFieldEnum = (typeof InstituteScalarFieldEnum)[keyof typeof InstituteScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StaffScalarFieldEnum: {
    StaffId: 'StaffId',
    StaffType: 'StaffType',
    Salary: 'Salary'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    StudentId: 'StudentId',
    EnrolledFor: 'EnrolledFor'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    UserId: 'UserId',
    firstName: 'firstName',
    lastName: 'lastName',
    emailId: 'emailId',
    Phone: 'Phone',
    Age: 'Age',
    Gender: 'Gender',
    Institute_id: 'Institute_id',
    JoinedOn: 'JoinedOn',
    EndedOn: 'EndedOn'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type instituteWhereInput = {
    AND?: Enumerable<instituteWhereInput>
    OR?: Enumerable<instituteWhereInput>
    NOT?: Enumerable<instituteWhereInput>
    Id?: IntFilter | number
    InstituteName?: StringFilter | string
    Address?: StringFilter | string
    user?: UserListRelationFilter
  }

  export type instituteOrderByWithRelationInput = {
    Id?: SortOrder
    InstituteName?: SortOrder
    Address?: SortOrder
    user?: userOrderByRelationAggregateInput
  }

  export type instituteWhereUniqueInput = {
    Id?: number
  }

  export type instituteOrderByWithAggregationInput = {
    Id?: SortOrder
    InstituteName?: SortOrder
    Address?: SortOrder
    _count?: instituteCountOrderByAggregateInput
    _avg?: instituteAvgOrderByAggregateInput
    _max?: instituteMaxOrderByAggregateInput
    _min?: instituteMinOrderByAggregateInput
    _sum?: instituteSumOrderByAggregateInput
  }

  export type instituteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<instituteScalarWhereWithAggregatesInput>
    OR?: Enumerable<instituteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<instituteScalarWhereWithAggregatesInput>
    Id?: IntWithAggregatesFilter | number
    InstituteName?: StringWithAggregatesFilter | string
    Address?: StringWithAggregatesFilter | string
  }

  export type userWhereInput = {
    AND?: Enumerable<userWhereInput>
    OR?: Enumerable<userWhereInput>
    NOT?: Enumerable<userWhereInput>
    UserId?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    emailId?: StringFilter | string
    Phone?: StringFilter | string
    Age?: StringFilter | string
    Gender?: StringFilter | string
    Institute?: XOR<InstituteRelationFilter, instituteWhereInput>
    Institute_id?: IntFilter | number
    JoinedOn?: DateTimeFilter | Date | string
    EndedOn?: DateTimeNullableFilter | Date | string | null
    Staff?: StaffListRelationFilter
    Student?: StudentListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    UserId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    emailId?: SortOrder
    Phone?: SortOrder
    Age?: SortOrder
    Gender?: SortOrder
    Institute?: instituteOrderByWithRelationInput
    Institute_id?: SortOrder
    JoinedOn?: SortOrder
    EndedOn?: SortOrder
    Staff?: staffOrderByRelationAggregateInput
    Student?: StudentOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = {
    UserId?: number
  }

  export type userOrderByWithAggregationInput = {
    UserId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    emailId?: SortOrder
    Phone?: SortOrder
    Age?: SortOrder
    Gender?: SortOrder
    Institute_id?: SortOrder
    JoinedOn?: SortOrder
    EndedOn?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: Enumerable<userScalarWhereWithAggregatesInput>
    OR?: Enumerable<userScalarWhereWithAggregatesInput>
    NOT?: Enumerable<userScalarWhereWithAggregatesInput>
    UserId?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    emailId?: StringWithAggregatesFilter | string
    Phone?: StringWithAggregatesFilter | string
    Age?: StringWithAggregatesFilter | string
    Gender?: StringWithAggregatesFilter | string
    Institute_id?: IntWithAggregatesFilter | number
    JoinedOn?: DateTimeWithAggregatesFilter | Date | string
    EndedOn?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type courseWhereInput = {
    AND?: Enumerable<courseWhereInput>
    OR?: Enumerable<courseWhereInput>
    NOT?: Enumerable<courseWhereInput>
    CourseId?: IntFilter | number
    CourseName?: StringFilter | string
    NumberOfStudents?: IntFilter | number
    Trainer?: XOR<StaffRelationFilter, staffWhereInput>
    Trainer_id?: IntFilter | number
    Students?: StudentListRelationFilter
  }

  export type courseOrderByWithRelationInput = {
    CourseId?: SortOrder
    CourseName?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer?: staffOrderByWithRelationInput
    Trainer_id?: SortOrder
    Students?: StudentOrderByRelationAggregateInput
  }

  export type courseWhereUniqueInput = {
    CourseId?: number
  }

  export type courseOrderByWithAggregationInput = {
    CourseId?: SortOrder
    CourseName?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer_id?: SortOrder
    _count?: courseCountOrderByAggregateInput
    _avg?: courseAvgOrderByAggregateInput
    _max?: courseMaxOrderByAggregateInput
    _min?: courseMinOrderByAggregateInput
    _sum?: courseSumOrderByAggregateInput
  }

  export type courseScalarWhereWithAggregatesInput = {
    AND?: Enumerable<courseScalarWhereWithAggregatesInput>
    OR?: Enumerable<courseScalarWhereWithAggregatesInput>
    NOT?: Enumerable<courseScalarWhereWithAggregatesInput>
    CourseId?: IntWithAggregatesFilter | number
    CourseName?: StringWithAggregatesFilter | string
    NumberOfStudents?: IntWithAggregatesFilter | number
    Trainer_id?: IntWithAggregatesFilter | number
  }

  export type staffWhereInput = {
    AND?: Enumerable<staffWhereInput>
    OR?: Enumerable<staffWhereInput>
    NOT?: Enumerable<staffWhereInput>
    StaffId?: IntFilter | number
    userId?: XOR<UserRelationFilter, userWhereInput>
    StaffType?: StringFilter | string
    Salary?: IntFilter | number
    Course?: CourseListRelationFilter
  }

  export type staffOrderByWithRelationInput = {
    StaffId?: SortOrder
    userId?: userOrderByWithRelationInput
    StaffType?: SortOrder
    Salary?: SortOrder
    Course?: courseOrderByRelationAggregateInput
  }

  export type staffWhereUniqueInput = {
    StaffId?: number
  }

  export type staffOrderByWithAggregationInput = {
    StaffId?: SortOrder
    StaffType?: SortOrder
    Salary?: SortOrder
    _count?: staffCountOrderByAggregateInput
    _avg?: staffAvgOrderByAggregateInput
    _max?: staffMaxOrderByAggregateInput
    _min?: staffMinOrderByAggregateInput
    _sum?: staffSumOrderByAggregateInput
  }

  export type staffScalarWhereWithAggregatesInput = {
    AND?: Enumerable<staffScalarWhereWithAggregatesInput>
    OR?: Enumerable<staffScalarWhereWithAggregatesInput>
    NOT?: Enumerable<staffScalarWhereWithAggregatesInput>
    StaffId?: IntWithAggregatesFilter | number
    StaffType?: StringWithAggregatesFilter | string
    Salary?: IntWithAggregatesFilter | number
  }

  export type StudentWhereInput = {
    AND?: Enumerable<StudentWhereInput>
    OR?: Enumerable<StudentWhereInput>
    NOT?: Enumerable<StudentWhereInput>
    StudentId?: IntFilter | number
    userId?: XOR<UserRelationFilter, userWhereInput>
    EnrolledFor?: IntFilter | number
    Course?: XOR<CourseRelationFilter, courseWhereInput>
  }

  export type StudentOrderByWithRelationInput = {
    StudentId?: SortOrder
    userId?: userOrderByWithRelationInput
    EnrolledFor?: SortOrder
    Course?: courseOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = {
    StudentId?: number
  }

  export type StudentOrderByWithAggregationInput = {
    StudentId?: SortOrder
    EnrolledFor?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StudentScalarWhereWithAggregatesInput>
    OR?: Enumerable<StudentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StudentScalarWhereWithAggregatesInput>
    StudentId?: IntWithAggregatesFilter | number
    EnrolledFor?: IntWithAggregatesFilter | number
  }

  export type instituteCreateInput = {
    InstituteName: string
    Address: string
    user?: userCreateNestedManyWithoutInstituteInput
  }

  export type instituteUncheckedCreateInput = {
    Id?: number
    InstituteName: string
    Address: string
    user?: userUncheckedCreateNestedManyWithoutInstituteInput
  }

  export type instituteUpdateInput = {
    InstituteName?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    user?: userUpdateManyWithoutInstituteNestedInput
  }

  export type instituteUncheckedUpdateInput = {
    Id?: IntFieldUpdateOperationsInput | number
    InstituteName?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
    user?: userUncheckedUpdateManyWithoutInstituteNestedInput
  }

  export type instituteCreateManyInput = {
    Id?: number
    InstituteName: string
    Address: string
  }

  export type instituteUpdateManyMutationInput = {
    InstituteName?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type instituteUncheckedUpdateManyInput = {
    Id?: IntFieldUpdateOperationsInput | number
    InstituteName?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type userCreateInput = {
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute: instituteCreateNestedOneWithoutUserInput
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Staff?: staffCreateNestedManyWithoutUserIdInput
    Student?: StudentCreateNestedManyWithoutUserIdInput
  }

  export type userUncheckedCreateInput = {
    UserId?: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute_id: number
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Staff?: staffUncheckedCreateNestedManyWithoutUserIdInput
    Student?: StudentUncheckedCreateNestedManyWithoutUserIdInput
  }

  export type userUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute?: instituteUpdateOneRequiredWithoutUserNestedInput
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Staff?: staffUpdateManyWithoutUserIdNestedInput
    Student?: StudentUpdateManyWithoutUserIdNestedInput
  }

  export type userUncheckedUpdateInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute_id?: IntFieldUpdateOperationsInput | number
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Staff?: staffUncheckedUpdateManyWithoutUserIdNestedInput
    Student?: StudentUncheckedUpdateManyWithoutUserIdNestedInput
  }

  export type userCreateManyInput = {
    UserId?: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute_id: number
    JoinedOn: Date | string
    EndedOn?: Date | string | null
  }

  export type userUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type userUncheckedUpdateManyInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute_id?: IntFieldUpdateOperationsInput | number
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type courseCreateInput = {
    CourseName: string
    NumberOfStudents: number
    Trainer: staffCreateNestedOneWithoutCourseInput
    Students?: StudentCreateNestedManyWithoutCourseInput
  }

  export type courseUncheckedCreateInput = {
    CourseId?: number
    CourseName: string
    NumberOfStudents: number
    Trainer_id: number
    Students?: StudentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type courseUpdateInput = {
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Trainer?: staffUpdateOneRequiredWithoutCourseNestedInput
    Students?: StudentUpdateManyWithoutCourseNestedInput
  }

  export type courseUncheckedUpdateInput = {
    CourseId?: IntFieldUpdateOperationsInput | number
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Trainer_id?: IntFieldUpdateOperationsInput | number
    Students?: StudentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type courseCreateManyInput = {
    CourseId?: number
    CourseName: string
    NumberOfStudents: number
    Trainer_id: number
  }

  export type courseUpdateManyMutationInput = {
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
  }

  export type courseUncheckedUpdateManyInput = {
    CourseId?: IntFieldUpdateOperationsInput | number
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Trainer_id?: IntFieldUpdateOperationsInput | number
  }

  export type staffCreateInput = {
    userId: userCreateNestedOneWithoutStaffInput
    StaffType: string
    Salary: number
    Course?: courseCreateNestedManyWithoutTrainerInput
  }

  export type staffUncheckedCreateInput = {
    StaffId: number
    StaffType: string
    Salary: number
    Course?: courseUncheckedCreateNestedManyWithoutTrainerInput
  }

  export type staffUpdateInput = {
    userId?: userUpdateOneRequiredWithoutStaffNestedInput
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
    Course?: courseUpdateManyWithoutTrainerNestedInput
  }

  export type staffUncheckedUpdateInput = {
    StaffId?: IntFieldUpdateOperationsInput | number
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
    Course?: courseUncheckedUpdateManyWithoutTrainerNestedInput
  }

  export type staffCreateManyInput = {
    StaffId: number
    StaffType: string
    Salary: number
  }

  export type staffUpdateManyMutationInput = {
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
  }

  export type staffUncheckedUpdateManyInput = {
    StaffId?: IntFieldUpdateOperationsInput | number
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateInput = {
    userId: userCreateNestedOneWithoutStudentInput
    Course: courseCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    StudentId: number
    EnrolledFor: number
  }

  export type StudentUpdateInput = {
    userId?: userUpdateOneRequiredWithoutStudentNestedInput
    Course?: courseUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    StudentId?: IntFieldUpdateOperationsInput | number
    EnrolledFor?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManyInput = {
    StudentId: number
    EnrolledFor: number
  }

  export type StudentUpdateManyMutationInput = {

  }

  export type StudentUncheckedUpdateManyInput = {
    StudentId?: IntFieldUpdateOperationsInput | number
    EnrolledFor?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type instituteCountOrderByAggregateInput = {
    Id?: SortOrder
    InstituteName?: SortOrder
    Address?: SortOrder
  }

  export type instituteAvgOrderByAggregateInput = {
    Id?: SortOrder
  }

  export type instituteMaxOrderByAggregateInput = {
    Id?: SortOrder
    InstituteName?: SortOrder
    Address?: SortOrder
  }

  export type instituteMinOrderByAggregateInput = {
    Id?: SortOrder
    InstituteName?: SortOrder
    Address?: SortOrder
  }

  export type instituteSumOrderByAggregateInput = {
    Id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type InstituteRelationFilter = {
    is?: instituteWhereInput
    isNot?: instituteWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type StaffListRelationFilter = {
    every?: staffWhereInput
    some?: staffWhereInput
    none?: staffWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type staffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    UserId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    emailId?: SortOrder
    Phone?: SortOrder
    Age?: SortOrder
    Gender?: SortOrder
    Institute_id?: SortOrder
    JoinedOn?: SortOrder
    EndedOn?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    UserId?: SortOrder
    Institute_id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    UserId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    emailId?: SortOrder
    Phone?: SortOrder
    Age?: SortOrder
    Gender?: SortOrder
    Institute_id?: SortOrder
    JoinedOn?: SortOrder
    EndedOn?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    UserId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    emailId?: SortOrder
    Phone?: SortOrder
    Age?: SortOrder
    Gender?: SortOrder
    Institute_id?: SortOrder
    JoinedOn?: SortOrder
    EndedOn?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    UserId?: SortOrder
    Institute_id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type StaffRelationFilter = {
    is?: staffWhereInput
    isNot?: staffWhereInput
  }

  export type courseCountOrderByAggregateInput = {
    CourseId?: SortOrder
    CourseName?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer_id?: SortOrder
  }

  export type courseAvgOrderByAggregateInput = {
    CourseId?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer_id?: SortOrder
  }

  export type courseMaxOrderByAggregateInput = {
    CourseId?: SortOrder
    CourseName?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer_id?: SortOrder
  }

  export type courseMinOrderByAggregateInput = {
    CourseId?: SortOrder
    CourseName?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer_id?: SortOrder
  }

  export type courseSumOrderByAggregateInput = {
    CourseId?: SortOrder
    NumberOfStudents?: SortOrder
    Trainer_id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type CourseListRelationFilter = {
    every?: courseWhereInput
    some?: courseWhereInput
    none?: courseWhereInput
  }

  export type courseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type staffCountOrderByAggregateInput = {
    StaffId?: SortOrder
    StaffType?: SortOrder
    Salary?: SortOrder
  }

  export type staffAvgOrderByAggregateInput = {
    StaffId?: SortOrder
    Salary?: SortOrder
  }

  export type staffMaxOrderByAggregateInput = {
    StaffId?: SortOrder
    StaffType?: SortOrder
    Salary?: SortOrder
  }

  export type staffMinOrderByAggregateInput = {
    StaffId?: SortOrder
    StaffType?: SortOrder
    Salary?: SortOrder
  }

  export type staffSumOrderByAggregateInput = {
    StaffId?: SortOrder
    Salary?: SortOrder
  }

  export type CourseRelationFilter = {
    is?: courseWhereInput
    isNot?: courseWhereInput
  }

  export type StudentCountOrderByAggregateInput = {
    StudentId?: SortOrder
    EnrolledFor?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    StudentId?: SortOrder
    EnrolledFor?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    StudentId?: SortOrder
    EnrolledFor?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    StudentId?: SortOrder
    EnrolledFor?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    StudentId?: SortOrder
    EnrolledFor?: SortOrder
  }

  export type userCreateNestedManyWithoutInstituteInput = {
    create?: XOR<Enumerable<userCreateWithoutInstituteInput>, Enumerable<userUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutInstituteInput>
    createMany?: userCreateManyInstituteInputEnvelope
    connect?: Enumerable<userWhereUniqueInput>
  }

  export type userUncheckedCreateNestedManyWithoutInstituteInput = {
    create?: XOR<Enumerable<userCreateWithoutInstituteInput>, Enumerable<userUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutInstituteInput>
    createMany?: userCreateManyInstituteInputEnvelope
    connect?: Enumerable<userWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type userUpdateManyWithoutInstituteNestedInput = {
    create?: XOR<Enumerable<userCreateWithoutInstituteInput>, Enumerable<userUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutInstituteInput>
    upsert?: Enumerable<userUpsertWithWhereUniqueWithoutInstituteInput>
    createMany?: userCreateManyInstituteInputEnvelope
    set?: Enumerable<userWhereUniqueInput>
    disconnect?: Enumerable<userWhereUniqueInput>
    delete?: Enumerable<userWhereUniqueInput>
    connect?: Enumerable<userWhereUniqueInput>
    update?: Enumerable<userUpdateWithWhereUniqueWithoutInstituteInput>
    updateMany?: Enumerable<userUpdateManyWithWhereWithoutInstituteInput>
    deleteMany?: Enumerable<userScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type userUncheckedUpdateManyWithoutInstituteNestedInput = {
    create?: XOR<Enumerable<userCreateWithoutInstituteInput>, Enumerable<userUncheckedCreateWithoutInstituteInput>>
    connectOrCreate?: Enumerable<userCreateOrConnectWithoutInstituteInput>
    upsert?: Enumerable<userUpsertWithWhereUniqueWithoutInstituteInput>
    createMany?: userCreateManyInstituteInputEnvelope
    set?: Enumerable<userWhereUniqueInput>
    disconnect?: Enumerable<userWhereUniqueInput>
    delete?: Enumerable<userWhereUniqueInput>
    connect?: Enumerable<userWhereUniqueInput>
    update?: Enumerable<userUpdateWithWhereUniqueWithoutInstituteInput>
    updateMany?: Enumerable<userUpdateManyWithWhereWithoutInstituteInput>
    deleteMany?: Enumerable<userScalarWhereInput>
  }

  export type instituteCreateNestedOneWithoutUserInput = {
    create?: XOR<instituteCreateWithoutUserInput, instituteUncheckedCreateWithoutUserInput>
    connectOrCreate?: instituteCreateOrConnectWithoutUserInput
    connect?: instituteWhereUniqueInput
  }

  export type staffCreateNestedManyWithoutUserIdInput = {
    create?: XOR<Enumerable<staffCreateWithoutUserIdInput>, Enumerable<staffUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<staffCreateOrConnectWithoutUserIdInput>
    createMany?: staffCreateManyUserIdInputEnvelope
    connect?: Enumerable<staffWhereUniqueInput>
  }

  export type StudentCreateNestedManyWithoutUserIdInput = {
    create?: XOR<Enumerable<StudentCreateWithoutUserIdInput>, Enumerable<StudentUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutUserIdInput>
    createMany?: StudentCreateManyUserIdInputEnvelope
    connect?: Enumerable<StudentWhereUniqueInput>
  }

  export type staffUncheckedCreateNestedManyWithoutUserIdInput = {
    create?: XOR<Enumerable<staffCreateWithoutUserIdInput>, Enumerable<staffUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<staffCreateOrConnectWithoutUserIdInput>
    createMany?: staffCreateManyUserIdInputEnvelope
    connect?: Enumerable<staffWhereUniqueInput>
  }

  export type StudentUncheckedCreateNestedManyWithoutUserIdInput = {
    create?: XOR<Enumerable<StudentCreateWithoutUserIdInput>, Enumerable<StudentUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutUserIdInput>
    createMany?: StudentCreateManyUserIdInputEnvelope
    connect?: Enumerable<StudentWhereUniqueInput>
  }

  export type instituteUpdateOneRequiredWithoutUserNestedInput = {
    create?: XOR<instituteCreateWithoutUserInput, instituteUncheckedCreateWithoutUserInput>
    connectOrCreate?: instituteCreateOrConnectWithoutUserInput
    upsert?: instituteUpsertWithoutUserInput
    connect?: instituteWhereUniqueInput
    update?: XOR<instituteUpdateWithoutUserInput, instituteUncheckedUpdateWithoutUserInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type staffUpdateManyWithoutUserIdNestedInput = {
    create?: XOR<Enumerable<staffCreateWithoutUserIdInput>, Enumerable<staffUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<staffCreateOrConnectWithoutUserIdInput>
    upsert?: Enumerable<staffUpsertWithWhereUniqueWithoutUserIdInput>
    createMany?: staffCreateManyUserIdInputEnvelope
    set?: Enumerable<staffWhereUniqueInput>
    disconnect?: Enumerable<staffWhereUniqueInput>
    delete?: Enumerable<staffWhereUniqueInput>
    connect?: Enumerable<staffWhereUniqueInput>
    update?: Enumerable<staffUpdateWithWhereUniqueWithoutUserIdInput>
    updateMany?: Enumerable<staffUpdateManyWithWhereWithoutUserIdInput>
    deleteMany?: Enumerable<staffScalarWhereInput>
  }

  export type StudentUpdateManyWithoutUserIdNestedInput = {
    create?: XOR<Enumerable<StudentCreateWithoutUserIdInput>, Enumerable<StudentUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutUserIdInput>
    upsert?: Enumerable<StudentUpsertWithWhereUniqueWithoutUserIdInput>
    createMany?: StudentCreateManyUserIdInputEnvelope
    set?: Enumerable<StudentWhereUniqueInput>
    disconnect?: Enumerable<StudentWhereUniqueInput>
    delete?: Enumerable<StudentWhereUniqueInput>
    connect?: Enumerable<StudentWhereUniqueInput>
    update?: Enumerable<StudentUpdateWithWhereUniqueWithoutUserIdInput>
    updateMany?: Enumerable<StudentUpdateManyWithWhereWithoutUserIdInput>
    deleteMany?: Enumerable<StudentScalarWhereInput>
  }

  export type staffUncheckedUpdateManyWithoutUserIdNestedInput = {
    create?: XOR<Enumerable<staffCreateWithoutUserIdInput>, Enumerable<staffUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<staffCreateOrConnectWithoutUserIdInput>
    upsert?: Enumerable<staffUpsertWithWhereUniqueWithoutUserIdInput>
    createMany?: staffCreateManyUserIdInputEnvelope
    set?: Enumerable<staffWhereUniqueInput>
    disconnect?: Enumerable<staffWhereUniqueInput>
    delete?: Enumerable<staffWhereUniqueInput>
    connect?: Enumerable<staffWhereUniqueInput>
    update?: Enumerable<staffUpdateWithWhereUniqueWithoutUserIdInput>
    updateMany?: Enumerable<staffUpdateManyWithWhereWithoutUserIdInput>
    deleteMany?: Enumerable<staffScalarWhereInput>
  }

  export type StudentUncheckedUpdateManyWithoutUserIdNestedInput = {
    create?: XOR<Enumerable<StudentCreateWithoutUserIdInput>, Enumerable<StudentUncheckedCreateWithoutUserIdInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutUserIdInput>
    upsert?: Enumerable<StudentUpsertWithWhereUniqueWithoutUserIdInput>
    createMany?: StudentCreateManyUserIdInputEnvelope
    set?: Enumerable<StudentWhereUniqueInput>
    disconnect?: Enumerable<StudentWhereUniqueInput>
    delete?: Enumerable<StudentWhereUniqueInput>
    connect?: Enumerable<StudentWhereUniqueInput>
    update?: Enumerable<StudentUpdateWithWhereUniqueWithoutUserIdInput>
    updateMany?: Enumerable<StudentUpdateManyWithWhereWithoutUserIdInput>
    deleteMany?: Enumerable<StudentScalarWhereInput>
  }

  export type staffCreateNestedOneWithoutCourseInput = {
    create?: XOR<staffCreateWithoutCourseInput, staffUncheckedCreateWithoutCourseInput>
    connectOrCreate?: staffCreateOrConnectWithoutCourseInput
    connect?: staffWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<StudentCreateWithoutCourseInput>, Enumerable<StudentUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutCourseInput>
    createMany?: StudentCreateManyCourseInputEnvelope
    connect?: Enumerable<StudentWhereUniqueInput>
  }

  export type StudentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<Enumerable<StudentCreateWithoutCourseInput>, Enumerable<StudentUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutCourseInput>
    createMany?: StudentCreateManyCourseInputEnvelope
    connect?: Enumerable<StudentWhereUniqueInput>
  }

  export type staffUpdateOneRequiredWithoutCourseNestedInput = {
    create?: XOR<staffCreateWithoutCourseInput, staffUncheckedCreateWithoutCourseInput>
    connectOrCreate?: staffCreateOrConnectWithoutCourseInput
    upsert?: staffUpsertWithoutCourseInput
    connect?: staffWhereUniqueInput
    update?: XOR<staffUpdateWithoutCourseInput, staffUncheckedUpdateWithoutCourseInput>
  }

  export type StudentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<StudentCreateWithoutCourseInput>, Enumerable<StudentUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<StudentUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: StudentCreateManyCourseInputEnvelope
    set?: Enumerable<StudentWhereUniqueInput>
    disconnect?: Enumerable<StudentWhereUniqueInput>
    delete?: Enumerable<StudentWhereUniqueInput>
    connect?: Enumerable<StudentWhereUniqueInput>
    update?: Enumerable<StudentUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<StudentUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<StudentScalarWhereInput>
  }

  export type StudentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<Enumerable<StudentCreateWithoutCourseInput>, Enumerable<StudentUncheckedCreateWithoutCourseInput>>
    connectOrCreate?: Enumerable<StudentCreateOrConnectWithoutCourseInput>
    upsert?: Enumerable<StudentUpsertWithWhereUniqueWithoutCourseInput>
    createMany?: StudentCreateManyCourseInputEnvelope
    set?: Enumerable<StudentWhereUniqueInput>
    disconnect?: Enumerable<StudentWhereUniqueInput>
    delete?: Enumerable<StudentWhereUniqueInput>
    connect?: Enumerable<StudentWhereUniqueInput>
    update?: Enumerable<StudentUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<StudentUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<StudentScalarWhereInput>
  }

  export type userCreateNestedOneWithoutStaffInput = {
    create?: XOR<userCreateWithoutStaffInput, userUncheckedCreateWithoutStaffInput>
    connectOrCreate?: userCreateOrConnectWithoutStaffInput
    connect?: userWhereUniqueInput
  }

  export type courseCreateNestedManyWithoutTrainerInput = {
    create?: XOR<Enumerable<courseCreateWithoutTrainerInput>, Enumerable<courseUncheckedCreateWithoutTrainerInput>>
    connectOrCreate?: Enumerable<courseCreateOrConnectWithoutTrainerInput>
    createMany?: courseCreateManyTrainerInputEnvelope
    connect?: Enumerable<courseWhereUniqueInput>
  }

  export type courseUncheckedCreateNestedManyWithoutTrainerInput = {
    create?: XOR<Enumerable<courseCreateWithoutTrainerInput>, Enumerable<courseUncheckedCreateWithoutTrainerInput>>
    connectOrCreate?: Enumerable<courseCreateOrConnectWithoutTrainerInput>
    createMany?: courseCreateManyTrainerInputEnvelope
    connect?: Enumerable<courseWhereUniqueInput>
  }

  export type userUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<userCreateWithoutStaffInput, userUncheckedCreateWithoutStaffInput>
    connectOrCreate?: userCreateOrConnectWithoutStaffInput
    upsert?: userUpsertWithoutStaffInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutStaffInput, userUncheckedUpdateWithoutStaffInput>
  }

  export type courseUpdateManyWithoutTrainerNestedInput = {
    create?: XOR<Enumerable<courseCreateWithoutTrainerInput>, Enumerable<courseUncheckedCreateWithoutTrainerInput>>
    connectOrCreate?: Enumerable<courseCreateOrConnectWithoutTrainerInput>
    upsert?: Enumerable<courseUpsertWithWhereUniqueWithoutTrainerInput>
    createMany?: courseCreateManyTrainerInputEnvelope
    set?: Enumerable<courseWhereUniqueInput>
    disconnect?: Enumerable<courseWhereUniqueInput>
    delete?: Enumerable<courseWhereUniqueInput>
    connect?: Enumerable<courseWhereUniqueInput>
    update?: Enumerable<courseUpdateWithWhereUniqueWithoutTrainerInput>
    updateMany?: Enumerable<courseUpdateManyWithWhereWithoutTrainerInput>
    deleteMany?: Enumerable<courseScalarWhereInput>
  }

  export type courseUncheckedUpdateManyWithoutTrainerNestedInput = {
    create?: XOR<Enumerable<courseCreateWithoutTrainerInput>, Enumerable<courseUncheckedCreateWithoutTrainerInput>>
    connectOrCreate?: Enumerable<courseCreateOrConnectWithoutTrainerInput>
    upsert?: Enumerable<courseUpsertWithWhereUniqueWithoutTrainerInput>
    createMany?: courseCreateManyTrainerInputEnvelope
    set?: Enumerable<courseWhereUniqueInput>
    disconnect?: Enumerable<courseWhereUniqueInput>
    delete?: Enumerable<courseWhereUniqueInput>
    connect?: Enumerable<courseWhereUniqueInput>
    update?: Enumerable<courseUpdateWithWhereUniqueWithoutTrainerInput>
    updateMany?: Enumerable<courseUpdateManyWithWhereWithoutTrainerInput>
    deleteMany?: Enumerable<courseScalarWhereInput>
  }

  export type userCreateNestedOneWithoutStudentInput = {
    create?: XOR<userCreateWithoutStudentInput, userUncheckedCreateWithoutStudentInput>
    connectOrCreate?: userCreateOrConnectWithoutStudentInput
    connect?: userWhereUniqueInput
  }

  export type courseCreateNestedOneWithoutStudentsInput = {
    create?: XOR<courseCreateWithoutStudentsInput, courseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: courseCreateOrConnectWithoutStudentsInput
    connect?: courseWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<userCreateWithoutStudentInput, userUncheckedCreateWithoutStudentInput>
    connectOrCreate?: userCreateOrConnectWithoutStudentInput
    upsert?: userUpsertWithoutStudentInput
    connect?: userWhereUniqueInput
    update?: XOR<userUpdateWithoutStudentInput, userUncheckedUpdateWithoutStudentInput>
  }

  export type courseUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<courseCreateWithoutStudentsInput, courseUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: courseCreateOrConnectWithoutStudentsInput
    upsert?: courseUpsertWithoutStudentsInput
    connect?: courseWhereUniqueInput
    update?: XOR<courseUpdateWithoutStudentsInput, courseUncheckedUpdateWithoutStudentsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type userCreateWithoutInstituteInput = {
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Staff?: staffCreateNestedManyWithoutUserIdInput
    Student?: StudentCreateNestedManyWithoutUserIdInput
  }

  export type userUncheckedCreateWithoutInstituteInput = {
    UserId?: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Staff?: staffUncheckedCreateNestedManyWithoutUserIdInput
    Student?: StudentUncheckedCreateNestedManyWithoutUserIdInput
  }

  export type userCreateOrConnectWithoutInstituteInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutInstituteInput, userUncheckedCreateWithoutInstituteInput>
  }

  export type userCreateManyInstituteInputEnvelope = {
    data: Enumerable<userCreateManyInstituteInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithWhereUniqueWithoutInstituteInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutInstituteInput, userUncheckedUpdateWithoutInstituteInput>
    create: XOR<userCreateWithoutInstituteInput, userUncheckedCreateWithoutInstituteInput>
  }

  export type userUpdateWithWhereUniqueWithoutInstituteInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutInstituteInput, userUncheckedUpdateWithoutInstituteInput>
  }

  export type userUpdateManyWithWhereWithoutInstituteInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutUserInput>
  }

  export type userScalarWhereInput = {
    AND?: Enumerable<userScalarWhereInput>
    OR?: Enumerable<userScalarWhereInput>
    NOT?: Enumerable<userScalarWhereInput>
    UserId?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    emailId?: StringFilter | string
    Phone?: StringFilter | string
    Age?: StringFilter | string
    Gender?: StringFilter | string
    Institute_id?: IntFilter | number
    JoinedOn?: DateTimeFilter | Date | string
    EndedOn?: DateTimeNullableFilter | Date | string | null
  }

  export type instituteCreateWithoutUserInput = {
    InstituteName: string
    Address: string
  }

  export type instituteUncheckedCreateWithoutUserInput = {
    Id?: number
    InstituteName: string
    Address: string
  }

  export type instituteCreateOrConnectWithoutUserInput = {
    where: instituteWhereUniqueInput
    create: XOR<instituteCreateWithoutUserInput, instituteUncheckedCreateWithoutUserInput>
  }

  export type staffCreateWithoutUserIdInput = {
    StaffType: string
    Salary: number
    Course?: courseCreateNestedManyWithoutTrainerInput
  }

  export type staffUncheckedCreateWithoutUserIdInput = {
    StaffType: string
    Salary: number
    Course?: courseUncheckedCreateNestedManyWithoutTrainerInput
  }

  export type staffCreateOrConnectWithoutUserIdInput = {
    where: staffWhereUniqueInput
    create: XOR<staffCreateWithoutUserIdInput, staffUncheckedCreateWithoutUserIdInput>
  }

  export type staffCreateManyUserIdInputEnvelope = {
    data: Enumerable<staffCreateManyUserIdInput>
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutUserIdInput = {
    Course: courseCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutUserIdInput = {
    EnrolledFor: number
  }

  export type StudentCreateOrConnectWithoutUserIdInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserIdInput, StudentUncheckedCreateWithoutUserIdInput>
  }

  export type StudentCreateManyUserIdInputEnvelope = {
    data: Enumerable<StudentCreateManyUserIdInput>
    skipDuplicates?: boolean
  }

  export type instituteUpsertWithoutUserInput = {
    update: XOR<instituteUpdateWithoutUserInput, instituteUncheckedUpdateWithoutUserInput>
    create: XOR<instituteCreateWithoutUserInput, instituteUncheckedCreateWithoutUserInput>
  }

  export type instituteUpdateWithoutUserInput = {
    InstituteName?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type instituteUncheckedUpdateWithoutUserInput = {
    Id?: IntFieldUpdateOperationsInput | number
    InstituteName?: StringFieldUpdateOperationsInput | string
    Address?: StringFieldUpdateOperationsInput | string
  }

  export type staffUpsertWithWhereUniqueWithoutUserIdInput = {
    where: staffWhereUniqueInput
    update: XOR<staffUpdateWithoutUserIdInput, staffUncheckedUpdateWithoutUserIdInput>
    create: XOR<staffCreateWithoutUserIdInput, staffUncheckedCreateWithoutUserIdInput>
  }

  export type staffUpdateWithWhereUniqueWithoutUserIdInput = {
    where: staffWhereUniqueInput
    data: XOR<staffUpdateWithoutUserIdInput, staffUncheckedUpdateWithoutUserIdInput>
  }

  export type staffUpdateManyWithWhereWithoutUserIdInput = {
    where: staffScalarWhereInput
    data: XOR<staffUpdateManyMutationInput, staffUncheckedUpdateManyWithoutStaffInput>
  }

  export type staffScalarWhereInput = {
    AND?: Enumerable<staffScalarWhereInput>
    OR?: Enumerable<staffScalarWhereInput>
    NOT?: Enumerable<staffScalarWhereInput>
    StaffId?: IntFilter | number
    StaffType?: StringFilter | string
    Salary?: IntFilter | number
  }

  export type StudentUpsertWithWhereUniqueWithoutUserIdInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutUserIdInput, StudentUncheckedUpdateWithoutUserIdInput>
    create: XOR<StudentCreateWithoutUserIdInput, StudentUncheckedCreateWithoutUserIdInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutUserIdInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutUserIdInput, StudentUncheckedUpdateWithoutUserIdInput>
  }

  export type StudentUpdateManyWithWhereWithoutUserIdInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentScalarWhereInput = {
    AND?: Enumerable<StudentScalarWhereInput>
    OR?: Enumerable<StudentScalarWhereInput>
    NOT?: Enumerable<StudentScalarWhereInput>
    StudentId?: IntFilter | number
    EnrolledFor?: IntFilter | number
  }

  export type staffCreateWithoutCourseInput = {
    userId: userCreateNestedOneWithoutStaffInput
    StaffType: string
    Salary: number
  }

  export type staffUncheckedCreateWithoutCourseInput = {
    StaffId: number
    StaffType: string
    Salary: number
  }

  export type staffCreateOrConnectWithoutCourseInput = {
    where: staffWhereUniqueInput
    create: XOR<staffCreateWithoutCourseInput, staffUncheckedCreateWithoutCourseInput>
  }

  export type StudentCreateWithoutCourseInput = {
    userId: userCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCourseInput = {
    StudentId: number
  }

  export type StudentCreateOrConnectWithoutCourseInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput>
  }

  export type StudentCreateManyCourseInputEnvelope = {
    data: Enumerable<StudentCreateManyCourseInput>
    skipDuplicates?: boolean
  }

  export type staffUpsertWithoutCourseInput = {
    update: XOR<staffUpdateWithoutCourseInput, staffUncheckedUpdateWithoutCourseInput>
    create: XOR<staffCreateWithoutCourseInput, staffUncheckedCreateWithoutCourseInput>
  }

  export type staffUpdateWithoutCourseInput = {
    userId?: userUpdateOneRequiredWithoutStaffNestedInput
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
  }

  export type staffUncheckedUpdateWithoutCourseInput = {
    StaffId?: IntFieldUpdateOperationsInput | number
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpsertWithWhereUniqueWithoutCourseInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutCourseInput, StudentUncheckedUpdateWithoutCourseInput>
    create: XOR<StudentCreateWithoutCourseInput, StudentUncheckedCreateWithoutCourseInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutCourseInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutCourseInput, StudentUncheckedUpdateWithoutCourseInput>
  }

  export type StudentUpdateManyWithWhereWithoutCourseInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutStudentsInput>
  }

  export type userCreateWithoutStaffInput = {
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute: instituteCreateNestedOneWithoutUserInput
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Student?: StudentCreateNestedManyWithoutUserIdInput
  }

  export type userUncheckedCreateWithoutStaffInput = {
    UserId?: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute_id: number
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Student?: StudentUncheckedCreateNestedManyWithoutUserIdInput
  }

  export type userCreateOrConnectWithoutStaffInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutStaffInput, userUncheckedCreateWithoutStaffInput>
  }

  export type courseCreateWithoutTrainerInput = {
    CourseName: string
    NumberOfStudents: number
    Students?: StudentCreateNestedManyWithoutCourseInput
  }

  export type courseUncheckedCreateWithoutTrainerInput = {
    CourseId?: number
    CourseName: string
    NumberOfStudents: number
    Students?: StudentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type courseCreateOrConnectWithoutTrainerInput = {
    where: courseWhereUniqueInput
    create: XOR<courseCreateWithoutTrainerInput, courseUncheckedCreateWithoutTrainerInput>
  }

  export type courseCreateManyTrainerInputEnvelope = {
    data: Enumerable<courseCreateManyTrainerInput>
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutStaffInput = {
    update: XOR<userUpdateWithoutStaffInput, userUncheckedUpdateWithoutStaffInput>
    create: XOR<userCreateWithoutStaffInput, userUncheckedCreateWithoutStaffInput>
  }

  export type userUpdateWithoutStaffInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute?: instituteUpdateOneRequiredWithoutUserNestedInput
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUpdateManyWithoutUserIdNestedInput
  }

  export type userUncheckedUpdateWithoutStaffInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute_id?: IntFieldUpdateOperationsInput | number
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Student?: StudentUncheckedUpdateManyWithoutUserIdNestedInput
  }

  export type courseUpsertWithWhereUniqueWithoutTrainerInput = {
    where: courseWhereUniqueInput
    update: XOR<courseUpdateWithoutTrainerInput, courseUncheckedUpdateWithoutTrainerInput>
    create: XOR<courseCreateWithoutTrainerInput, courseUncheckedCreateWithoutTrainerInput>
  }

  export type courseUpdateWithWhereUniqueWithoutTrainerInput = {
    where: courseWhereUniqueInput
    data: XOR<courseUpdateWithoutTrainerInput, courseUncheckedUpdateWithoutTrainerInput>
  }

  export type courseUpdateManyWithWhereWithoutTrainerInput = {
    where: courseScalarWhereInput
    data: XOR<courseUpdateManyMutationInput, courseUncheckedUpdateManyWithoutCourseInput>
  }

  export type courseScalarWhereInput = {
    AND?: Enumerable<courseScalarWhereInput>
    OR?: Enumerable<courseScalarWhereInput>
    NOT?: Enumerable<courseScalarWhereInput>
    CourseId?: IntFilter | number
    CourseName?: StringFilter | string
    NumberOfStudents?: IntFilter | number
    Trainer_id?: IntFilter | number
  }

  export type userCreateWithoutStudentInput = {
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute: instituteCreateNestedOneWithoutUserInput
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Staff?: staffCreateNestedManyWithoutUserIdInput
  }

  export type userUncheckedCreateWithoutStudentInput = {
    UserId?: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    Institute_id: number
    JoinedOn: Date | string
    EndedOn?: Date | string | null
    Staff?: staffUncheckedCreateNestedManyWithoutUserIdInput
  }

  export type userCreateOrConnectWithoutStudentInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutStudentInput, userUncheckedCreateWithoutStudentInput>
  }

  export type courseCreateWithoutStudentsInput = {
    CourseName: string
    NumberOfStudents: number
    Trainer: staffCreateNestedOneWithoutCourseInput
  }

  export type courseUncheckedCreateWithoutStudentsInput = {
    CourseId?: number
    CourseName: string
    NumberOfStudents: number
    Trainer_id: number
  }

  export type courseCreateOrConnectWithoutStudentsInput = {
    where: courseWhereUniqueInput
    create: XOR<courseCreateWithoutStudentsInput, courseUncheckedCreateWithoutStudentsInput>
  }

  export type userUpsertWithoutStudentInput = {
    update: XOR<userUpdateWithoutStudentInput, userUncheckedUpdateWithoutStudentInput>
    create: XOR<userCreateWithoutStudentInput, userUncheckedCreateWithoutStudentInput>
  }

  export type userUpdateWithoutStudentInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute?: instituteUpdateOneRequiredWithoutUserNestedInput
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Staff?: staffUpdateManyWithoutUserIdNestedInput
  }

  export type userUncheckedUpdateWithoutStudentInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    Institute_id?: IntFieldUpdateOperationsInput | number
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Staff?: staffUncheckedUpdateManyWithoutUserIdNestedInput
  }

  export type courseUpsertWithoutStudentsInput = {
    update: XOR<courseUpdateWithoutStudentsInput, courseUncheckedUpdateWithoutStudentsInput>
    create: XOR<courseCreateWithoutStudentsInput, courseUncheckedCreateWithoutStudentsInput>
  }

  export type courseUpdateWithoutStudentsInput = {
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Trainer?: staffUpdateOneRequiredWithoutCourseNestedInput
  }

  export type courseUncheckedUpdateWithoutStudentsInput = {
    CourseId?: IntFieldUpdateOperationsInput | number
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Trainer_id?: IntFieldUpdateOperationsInput | number
  }

  export type userCreateManyInstituteInput = {
    UserId?: number
    firstName: string
    lastName: string
    emailId: string
    Phone: string
    Age: string
    Gender: string
    JoinedOn: Date | string
    EndedOn?: Date | string | null
  }

  export type userUpdateWithoutInstituteInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Staff?: staffUpdateManyWithoutUserIdNestedInput
    Student?: StudentUpdateManyWithoutUserIdNestedInput
  }

  export type userUncheckedUpdateWithoutInstituteInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Staff?: staffUncheckedUpdateManyWithoutUserIdNestedInput
    Student?: StudentUncheckedUpdateManyWithoutUserIdNestedInput
  }

  export type userUncheckedUpdateManyWithoutUserInput = {
    UserId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    Phone?: StringFieldUpdateOperationsInput | string
    Age?: StringFieldUpdateOperationsInput | string
    Gender?: StringFieldUpdateOperationsInput | string
    JoinedOn?: DateTimeFieldUpdateOperationsInput | Date | string
    EndedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type staffCreateManyUserIdInput = {
    StaffType: string
    Salary: number
  }

  export type StudentCreateManyUserIdInput = {
    EnrolledFor: number
  }

  export type staffUpdateWithoutUserIdInput = {
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
    Course?: courseUpdateManyWithoutTrainerNestedInput
  }

  export type staffUncheckedUpdateWithoutUserIdInput = {
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
    Course?: courseUncheckedUpdateManyWithoutTrainerNestedInput
  }

  export type staffUncheckedUpdateManyWithoutStaffInput = {
    StaffType?: StringFieldUpdateOperationsInput | string
    Salary?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUpdateWithoutUserIdInput = {
    Course?: courseUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserIdInput = {
    EnrolledFor?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUncheckedUpdateManyWithoutStudentInput = {
    EnrolledFor?: IntFieldUpdateOperationsInput | number
  }

  export type StudentCreateManyCourseInput = {
    StudentId: number
  }

  export type StudentUpdateWithoutCourseInput = {
    userId?: userUpdateOneRequiredWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCourseInput = {
    StudentId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentUncheckedUpdateManyWithoutStudentsInput = {
    StudentId?: IntFieldUpdateOperationsInput | number
  }

  export type courseCreateManyTrainerInput = {
    CourseId?: number
    CourseName: string
    NumberOfStudents: number
  }

  export type courseUpdateWithoutTrainerInput = {
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Students?: StudentUpdateManyWithoutCourseNestedInput
  }

  export type courseUncheckedUpdateWithoutTrainerInput = {
    CourseId?: IntFieldUpdateOperationsInput | number
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
    Students?: StudentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type courseUncheckedUpdateManyWithoutCourseInput = {
    CourseId?: IntFieldUpdateOperationsInput | number
    CourseName?: StringFieldUpdateOperationsInput | string
    NumberOfStudents?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}